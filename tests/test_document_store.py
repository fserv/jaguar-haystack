import json
import time
from haystack.dataclasses import Document
from jaguar_haystack.jaguar import JaguarDocumentStore
from jaguar_haystack.retriever import JaguarEmbeddingRetriever


import logging
logging.basicConfig(filename='/tmp/haystack.log', level=logging.DEBUG, format='%(asctime)s %(levelname)s:%(message)s')
logger = logging.getLogger(__name__)


#############################################################################################
##  This pytest script tests JaguarDocumentStore with test cases of creating a vector store,
##  add texts to the store, similarity search in the store, search with filters, anomaly search,
##  and similarity search of records with time cutoff.
##
##  Requirement: fwww http server must be running at 127.0.0.1:8080 (or any end point)
##               jaguardb server must be running accepting commands from the http server
##               Both servers can be started with:
##
##               sudo docker pull jaguardb/jaguardb_with_http
##
##               sudo docker run -d -p 8888:8888 -p 8080:8080 --name jaguardb_with_http  jaguardb/jaguardb_with_http
##
##
##  Two packages are rquired:
##
##               pip install -U jaguardb-http-client
##
##               pip install -U jaguar-haystack
##
##
##  mockClient: If http server, jaguardb server, or jaguardb-http-client python package
##              is not installed correctly, mockClient flag is turned on for mock testing.
##              (The rest of the code will still work if these have been setup correctly)
#############################################################################################


class TestJaguarDocumentStore:
    docstore: JaguarDocumentStore
    retriever: JaguarEmbeddingRetriever
    pod: str
    store: str
    mockClient: bool

    @classmethod
    def setup_class(cls) -> None:
        url = "http://127.0.0.1:8080/fwww/"
        cls.pod = "vdb"
        cls.store = "haystack_test_store"
        cls.mockClient = False
        vector_index = "v"
        vector_type = "cosine_fraction_float"
        vector_dimension = 3

        try:
            cls.docstore = JaguarDocumentStore(
                cls.pod,
                cls.store,
                vector_index,
                vector_type,
                vector_dimension,
                url,
            )

            cls.retriever = JaguarEmbeddingRetriever(
                cls.pod,
                cls.store,
                vector_index,
                vector_type,
                vector_dimension,
                url,
            )
        except ValueError:
            cls.mockClient = True



    @classmethod
    def teardown_class(cls) -> None:
        pass

    def test_login(self) -> None:
        """Client must login to jaguar store server.
        API key demouser is used for logging in.
        """
        if self.mockClient:
            return

        rc = self.docstore.login("demouser")
        if rc is not True:
            self.mockClient = True
            return

        assert rc is True

    def test_create(self) -> None:
        """Create a vector with vector index 'v' of vector_dimension.

        and 'v:text' to hold text and metadata author and category
        """
        if self.mockClient:
            return

        metadata_fields = "author char(32), category char(16)"
        self.docstore.create(metadata_fields, 1024)

        podstore = self.pod + "." + self.store
        js = self.docstore.run(f"desc {podstore}")
        jd = json.loads(js[0])
        assert podstore in jd["data"]

    def test_add_documents(self) -> None:
        """Add some text nodes to the vector store.

        Here the embeddings are given. In real-life applications,
        the embeddings should be generated by an embedding model.
        """
        if self.mockClient:
            return

        self.docstore.clear()

        doc1 = Document(
            content="Return of King Lear",
            meta={"author": "William", "category": "Tragedy"},
            embedding=[0.9, 0.1, 0.4],
        )

        doc2 = Document(
            content="Slow Clouds",
            meta={"author": "Adam", "category": "Nature"},
            embedding=[0.4, 0.2, 0.8],
        )

        doc3 = Document(
            content="Green Machine",
            meta={"author": "Eve", "category": "History"},
            embedding=[0.1, 0.7, 0.5],
        )

        docs = [doc1, doc2, doc3]

        cnt = self.docstore.write_documents(documents=docs)
        assert cnt == 3

    def test_search_similar_documents(self) -> None:
        """Test that [0.4, 0.2, 0.8] will retrieve text Slow Clouds.
        Here k is 1.
        """
        if self.mockClient:
            return

        qembedding = [0.4, 0.2, 0.8]
        docs = self.docstore.search_similar_documents(embedding=qembedding, k=1)

        assert len(docs) == 1
        assert docs[0].content == "Slow Clouds"

    def test_search_similar_documents_with_where(self) -> None:
        """Test loading documents with filter(where condition)."""
        if self.mockClient:
            return

        qembedding = [0.4, 0.2, 0.8]
        k = 3
        where = "author='Eve'"

        docs = self.docstore.search_similar_documents(
            qembedding,
            k,
            where=where,
            metadata_fields=["author", "category"],
        )

        assert len(docs) == 1
        assert docs[0].content == "Green Machine"
        assert docs[0].meta["author"] == "Eve"
        assert docs[0].meta["category"] == "History"

    def test_query_filter(self) -> None:
        """Test query with filter."""
        if self.mockClient:
            return

        qembedding = [0.4, 0.2, 0.8]
        filters = {
            "operator": "OR",
            "conditions": [
                {"field": "author", "operator": "==", "value": "Eve"},
                {"field": "author", "operator": "==", "value": "Jenny"},
            ],
        }

        docs = self.docstore.filter_documents(
            filters=filters,
            k=3,
        )

        assert len(docs) == 1
        assert docs[0].meta["v:text"] == "Green Machine"
        assert docs[0].meta["author"] == "Eve"
        assert docs[0].meta["category"] == "History"


    def test_query_cutoff(self) -> None:
        """Test query with time cutoff."""
        if self.mockClient:
            return

        qembedding = [0.4, 0.2, 0.8]
        args = "second_cutoff=1"

        time.sleep(2)
        docs = self.docstore.search_similar_documents(
            qembedding,
            k = 3,
            args=args,
            metadata_fields=["author", "category"],
        )

        assert len(docs) == 0

    def test_retriever(self) -> None:
        """Test that [0.4, 0.2, 0.8] will retrieve text Slow Clouds.
        Here k is 1.
        """
        if self.mockClient:
            return

        qembedding = [0.4, 0.2, 0.8]
        res = self.retriever.run(embedding=qembedding, top_k=1)
        docs = res["documents"]

        assert len(docs) == 1
        assert docs[0].content == "Slow Clouds"

    def test_search_anomalous(self) -> None:
        """Test detection of anomalousness."""
        if self.mockClient:
            return

        emb = [0.7, 0.1, 0.2]
        doc = Document(
            content="Gone With The Wind",
            embedding=emb,
        )
        result = self.docstore.is_anomalous(doc)
        assert result is False

    def test_delete_document(self) -> None:
        """Test deleting a document by ID
        """
        if self.mockClient:
            return

        qembedding = [0.4, 0.2, 0.8]
        docs = self.docstore.search_similar_documents(embedding=qembedding, k=1)
        docid = docs[0].id

        start_cnt = self.docstore.count_documents()
        self.docstore.delete_documents([docid])
        end_cnt = self.docstore.count_documents()
        assert start_cnt - 1 == end_cnt

    def test_clear(self) -> None:
        """Test cleanup of data in the store."""
        if self.mockClient:
            return

        self.docstore.clear()
        assert self.docstore.count_documents() == 0

    def test_drop(self) -> None:
        """Destroy the vector store."""
        if self.mockClient:
            return

        self.docstore.drop()

    def test_logout(self) -> None:
        """Client must logout to disconnect from jaguar server.

        and clean up resources used by the client
        """
        if self.mockClient:
            return

        self.docstore.logout()
